<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    var types = new[]
    {
        typeof(Int16),
        typeof(Int32),
        typeof(Int64),
        typeof(UInt16),
        typeof(UInt32),
        typeof(UInt64),
        typeof(Single),
        typeof(Double),
        typeof(byte), 
        typeof(sbyte),
        typeof(DateTime),
    };
#>

// Generated code

using System;
using System.Runtime.CompilerServices;


// ReSharper disable once CheckNamespace
namespace StructLinq
{
<# foreach(var t in types) {  #>
    public static partial class StructEnumerable
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private static <#= t.Name #> MaxCollection<#= t.Name #><TEnumerator>(ref TEnumerator enumerator)
            where TEnumerator : struct, ICollectionEnumerator<<#= t.Name #>>
        {
            var count = enumerator.Count;
            if (count == 0)
				throw new ArgumentOutOfRangeException("No elements");
			<#= t.Name #> result = enumerator.Get(0);
            for(int i = 1;i < count; i++)
			{
				var current = enumerator.Get(i);
				if (result < current)
					result = current;
			}
            enumerator.Dispose();
			return result;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= t.Name #> Max<TEnumerator>(this IStructCollection<<#= t.Name #>, TEnumerator> enumerable)
            where TEnumerator : struct, ICollectionEnumerator<<#= t.Name #>>
        {
            var enumerator = enumerable.GetEnumerator();
            return MaxCollection<#= t.Name #>(ref enumerator);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= t.Name #> Max<TEnumerable,TEnumerator>(this TEnumerable enumerable, Func<TEnumerable,IStructCollection<<#= t.Name #>, TEnumerator>> _)
            where TEnumerable : struct, IStructCollection<<#= t.Name #>, TEnumerator>
            where TEnumerator : struct, ICollectionEnumerator<<#= t.Name #>>
        {
            var enumerator = enumerable.GetEnumerator();
            return MaxCollection<#= t.Name #>(ref enumerator);
        }

    }


<# } #>
}
