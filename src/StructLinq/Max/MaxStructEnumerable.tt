<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    var types = new[]
    {
        typeof(Int16),
        typeof(Int32),
        typeof(Int64),
        typeof(UInt16),
        typeof(UInt32),
        typeof(UInt64),
        typeof(Single),
        typeof(Double),
        typeof(byte), 
        typeof(sbyte),
    };
#>


// Generated code

using System;
using System.Collections.Generic;

// ReSharper disable once CheckNamespace
namespace StructLinq
{
<# foreach(var t in types) {  #>
    public static partial class StructEnumerable
    {
        public static <#= t.Name #> Max<TEnumerator>(this IStructEnumerable<<#= t.Name #>, TEnumerator> enumerable)
            where TEnumerator : struct, IEnumerator<<#= t.Name #>>
        {
            using (var enumerator = enumerable.GetStructEnumerator())
            {
				if (!enumerator.MoveNext())
					throw new ArgumentOutOfRangeException("No elements");
				<#= t.Name #> result = enumerator.Current;
				while (enumerator.MoveNext())
				{
					var current = enumerator.Current;
					if (current > result)
						result = current;
				}
				return result;
            }
        }
    }


<# } #>
}
