<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    var types = new[]
    {
        typeof(Int16),
        typeof(Int32),
        typeof(Int64),
        typeof(UInt16),
        typeof(UInt32),
        typeof(UInt64),
        typeof(Single),
        typeof(Double),
        typeof(byte), 
        typeof(sbyte),
        typeof(DateTime),
    };
#>

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;


namespace StructLinq
{
    public readonly struct DefaultStructEqualityComparer :
    <# for(int i=0;i<types.Length;i++){  
        var t = types[i];#>
    IEqualityComparer<<#= t.Name #>> 
    <# if (i != (types.Length -1)) #>
        ,
    <# } #>
    {
    <# foreach(var t in types) {  #>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Equals(<#= t.Name #> x, <#= t.Name #> y) => x == y;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public int GetHashCode(<#= t.Name #> value) => value.GetHashCode();

    <# } #>

    }
}
