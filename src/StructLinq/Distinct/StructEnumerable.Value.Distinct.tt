<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    var types = new[]
    {
        typeof(Int16),
        typeof(Int32),
        typeof(Int64),
        typeof(UInt16),
        typeof(UInt32),
        typeof(UInt64),
        typeof(Single),
        typeof(Double),
        typeof(byte), 
        typeof(sbyte),
        typeof(DateTime),
    };
#>

using System;
using System.Buffers;
using System.Runtime.CompilerServices;
using StructLinq.Distinct;
using StructLinq.Utils.Collections;


// ReSharper disable once CheckNamespace
namespace StructLinq
{
    public static partial class StructEnumerable
    {
        <# foreach(var t in types) {  #>
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static DistinctEnumerable<<#= t.Name #>, TEnumerable, TEnumerator, DefaultStructEqualityComparer> Distinct<TEnumerable, TEnumerator>(this TEnumerable enumerable,
            Func<TEnumerable, IStructEnumerable<<#= t.Name #>, TEnumerator>> _)
            where TEnumerator : struct, IStructEnumerator<<#= t.Name #>>
            where TEnumerable : IStructEnumerable<<#= t.Name #>, TEnumerator>
        {
            var equalityComparer = new DefaultStructEqualityComparer();
            return new DistinctEnumerable<<#= t.Name #>, TEnumerable, TEnumerator, DefaultStructEqualityComparer>(ref enumerable, equalityComparer, 0, ArrayPool<int>.Shared, ArrayPool<Slot<<#= t.Name #>>>.Shared);
        }

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static DistinctEnumerable<<#= t.Name #>, IStructEnumerable<<#= t.Name #>, TEnumerator>, TEnumerator, DefaultStructEqualityComparer> Distinct<TEnumerator>(
            this IStructEnumerable<<#= t.Name #>, TEnumerator> enumerable)
            where TEnumerator : struct, IStructEnumerator<<#= t.Name #>>
        {
            var equalityComparer = new DefaultStructEqualityComparer();
            return new DistinctEnumerable<<#= t.Name #>, IStructEnumerable<<#= t.Name #>, TEnumerator>, TEnumerator, DefaultStructEqualityComparer>(ref enumerable, equalityComparer, 0, ArrayPool<int>.Shared, ArrayPool<Slot<<#= t.Name #>>>.Shared);
        }

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RefDistinctEnumerable<<#= t.Name #>, TEnumerable, TEnumerator, DefaultStructInEqualityComparer> Distinct<TEnumerable, TEnumerator>(this TEnumerable enumerable,
            Func<TEnumerable, IRefStructEnumerable<<#= t.Name #>, TEnumerator>> _)
            where TEnumerator : struct, IRefStructEnumerator<<#= t.Name #>>
            where TEnumerable : struct, IRefStructEnumerable<<#= t.Name #>, TEnumerator>
        {
            return enumerable.Distinct(new DefaultStructInEqualityComparer(), _);
        }
        
                        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RefDistinctEnumerable<<#= t.Name #>, IRefStructEnumerable<<#= t.Name #>, TEnumerator>, TEnumerator, DefaultStructInEqualityComparer> Distinct<TEnumerator>(
            this IRefStructEnumerable<<#= t.Name #>, TEnumerator> enumerable)
            where TEnumerator : struct, IRefStructEnumerator<<#= t.Name #>>
        {
            var equalityComparer = new DefaultStructInEqualityComparer();
            return new RefDistinctEnumerable<<#= t.Name #>, IRefStructEnumerable<<#= t.Name #>, TEnumerator>, TEnumerator, DefaultStructInEqualityComparer>(ref enumerable, equalityComparer, 0, ArrayPool<int>.Shared, ArrayPool<Slot<<#= t.Name #>>>.Shared);
        }

    <# } #>

    }
}
